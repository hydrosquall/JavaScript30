doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    title JS Drum Kit - Demo
    link(rel='stylesheet', href='style.css')
  body
    .keys
      .key(data-key='65')
        kbd A
        span.sound clap
      .key(data-key='83')
        kbd S
        span.sound hihat
      .key(data-key='68')
        kbd D
        span.sound kick
      .key(data-key='70')
        kbd F
        span.sound openhat
      .key(data-key='71')
        kbd G
        span.sound boom
      .key(data-key='72')
        kbd H
        span.sound ride
      .key(data-key='74')
        kbd J
        span.sound snare
      .key(data-key='75')
        kbd K
        span.sound tom
      .key(data-key='76')
        kbd L
        span.sound tink
    audio(data-key='65', src='sounds/clap.wav')
    audio(data-key='83', src='sounds/hihat.wav')
    audio(data-key='68', src='sounds/kick.wav')
    audio(data-key='70', src='sounds/openhat.wav')
    audio(data-key='71', src='sounds/boom.wav')
    audio(data-key='72', src='sounds/ride.wav')
    audio(data-key='74', src='sounds/snare.wav')
    audio(data-key='75', src='sounds/tom.wav')
    audio(data-key='76', src='sounds/tink.wav')
    script.
doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    title JS Drum Kit
    link(rel='stylesheet', href='style.css')
  body
    .keys
      .key(data-key='65')
        kbd A
        span.sound clap
      .key(data-key='83')
        kbd S
        span.sound hihat
      .key(data-key='68')
        kbd D
        span.sound kick
      .key(data-key='70')
        kbd F
        span.sound openhat
      .key(data-key='71')
        kbd G
        span.sound boom
      .key(data-key='72')
        kbd H
        span.sound ride
      .key(data-key='74')
        kbd J
        span.sound snare
      .key(data-key='75')
        kbd K
        span.sound tom
      .key(data-key='76')
        kbd L
        span.sound tink
    audio(data-key='65', src='sounds/clap.wav')
    audio(data-key='83', src='sounds/hihat.wav')
    audio(data-key='68', src='sounds/kick.wav')
    audio(data-key='70', src='sounds/openhat.wav')
    audio(data-key='71', src='sounds/boom.wav')
    audio(data-key='72', src='sounds/ride.wav')
    audio(data-key='74', src='sounds/snare.wav')
    audio(data-key='75', src='sounds/tom.wav')
    audio(data-key='76', src='sounds/tink.wav')
    script.

      // Function implicitly gets passed 1 argument (the event)
      function playSound(e) {
        // Use es6 template literal to interpolate the variable
         const audio = document.querySelector(`audio[data-key="${e.keyCode}"]`);
         const key   = document.querySelector(`.key[data-key="${e.keyCode}"]`);

         if (audio) {              // only play if a sound exists
            key.classList.add('playing');
            audio.currentTime = 0; // rewind the sound
            audio.play();
          }
      }

      window.addEventListener('keydown', playSound);

      // Use event listener to check for transition end. Is attaching listener
      // to each thing instead of doing event delegation :(
      // note that each CSS property fires its own transition event.
      // Delegation implementation based on the following response:
      // http://stackoverflow.com/questions/24117369/vanilla-js-event-delegation-dealing-with-child-elements-of-the-target-element
      
      // Event delegation implementation of transition removal
      function removeTransitionDelegate(e) {
        if (e.target.matches('.key') && (e.propertyName == 'transform') ) {
              e.target.classList.remove('playing');
        }
      }
      // 
      document.querySelector('body').addEventListener('transitionend', removeTransitionDelegate);

      // Wes Bos implementation, creates n event listeners (for each sound)
      //- function removeTransition(e) {
      //-   if (e.propertyName == 'transform') {
      //-       console.log("removing class");
      //-       this.classList.remove('playing');
      //-     } // else return null
      //- }
      //- const keys = document.querySelectorAll('.key');
      //- keys.forEach(key => key.addEventListener('transitionend', removeTransition));
